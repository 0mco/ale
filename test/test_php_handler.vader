Execute(The php handler should parse lines correctly):
  runtime ale_linters/php/php.vim

  AssertEqual
  \ [
  \   {
  \     'bufnr': 347,
  \     'lnum': 47,
  \     'vcol': 0,
  \     'col': 0,
  \     'text': "syntax error, unexpected ';', expecting ']'",
  \     'type': 'E',
  \     'nr': -1,
  \   },
  \   {
  \     'bufnr': 347,
  \     'lnum': 56,
  \     'vcol': 0,
  \     'col': 0,
  \     'text': "syntax error, unexpected '/', expecting function (T_FUNCTION) or const (T_CONST)",
  \     'type': 'E',
  \     'nr': -1,
  \   },
  \   {
  \     'bufnr': 347,
  \     'lnum': 13,
  \     'vcol': 0,
  \     'col': 0,
  \     'text': "syntax error, unexpected ')'",
  \     'type': 'E',
  \     'nr': -1,
  \   },
  \ ],
  \ ale_linters#php#php#Handle(347, [
  \   'This line should be ignored completely',
  \   "PHP Parse error:  syntax error, unexpected ';', expecting ']' in - on line 47",
  \   "PHP Parse error:  syntax error, unexpected '/', expecting function (T_FUNCTION) or const (T_CONST) in - on line 56",
  \   'This line should be ignored completely',
  \   "PHP Parse error:  syntax error, unexpected ')' in - on line 13",
  \ ])

After:
  call ale#linter#Reset()


Given php(A function call with missing argument delimiters):
  <?php
  unset($foo $bar)

Execute(The php handler should find columns correctly):
  call ale#Lint()
  call ale#engine#WaitForJobs(2000)

  AssertEqual
  \ [
  \   {'group': 'ALEError', 'id': 4, 'pos1': [2, 12, 1], 'priority': 10},
  \   {'group': 'ALEError', 'id': 5, 'pos1': [2, 12, 1], 'priority': 10}
  \ ],
  \ getmatches()
